local players = game:GetService("Players")
local PhysiecsServierce = game:GetService("PhysicsService")
local ReplicateStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Money = players.LocalPlayer:WaitForChild("Money")
local towers = ReplicateStorage:WaitForChild("Towers")
local Modules = ReplicateStorage:WaitForChild("Moduls")
local health = require(Modules:WaitForChild("Health"))
local Functions = ReplicateStorage:WaitForChild("Functions")
local RequestTowerFunction = Functions:WaitForChild("RequestTower")
local changemodeFunction = Functions:WaitForChild("ChangeTowerTarget")
local camera = workspace.CurrentCamera
local spawnTowerFunction =Functions:WaitForChild("SpawnTower")
local sellTowerFunction = Functions:WaitForChild("SellTower")
local gui = script.Parent
local map = workspace:WaitForChild("map")
local base = map:WaitForChild("Base")
local towerToSpawn = nil
local canPlace = false
local rotation = 0
local placedTowers = 0
local maxTowers = 15
local info = workspace:WaitForChild("Info")
local hoveredInstance = nil
local selectedTower = nil

local function SetupGui()
health.Setup(base, gui.Info.Health)

workspace.Mobs.ChildAdded:Connect(function(mob)
	health.Setup(mob)
end)

info.Message.Changed:Connect(function(change)
	gui.Info.Message.Text = change
	if change == "" then
		gui.Info.Message.Visible = false
	else
		gui.Info.Message.Visible = true
	end
end)

info.Wave.Changed:Connect(function(change)
	gui.Info.Wave.Text = "Wave: " .. change
end)

	Money.Changed:Connect(function(change)
		gui.Info.Money.MoneyBar.Text = "$: " .. Money.Value
		gui.Info.Money.MoneyBar.MoneyBar2.Text = "$: " .. Money.Value
	end)
	
end

SetupGui()

local function mouseRayCast (blacklist)
	local mousePosition = UserInputService:GetMouseLocation()
	local mouseRay = camera:ViewportPointToRay(mousePosition.X, mousePosition.Y)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = blacklist
	
	local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
	
	return raycastResult
end

local function CreateRangeCircle(tower, placeholder)
	local range = tower.Config.range.Value
	local height = (tower.PrimaryPart.Size.Y / 2) + tower.Humanoid.HipHeight
	local offset = CFrame.new(0, -height, 0)
	local p = Instance.new("Part")
	p.Name = "Range"
	p.Shape = Enum.PartType.Cylinder
	p.Material = Enum.Material.Neon
	p.Transparency = 0.9
	p.Size = Vector3.new(2, range * 2, range * 2)
	p.TopSurface = Enum.SurfaceType.Smooth
	p.BottomSurface = Enum.SurfaceType.Smooth
	p.CFrame = tower.PrimaryPart.CFrame * offset * CFrame.Angles(0, 0, math.rad(90))
	p.CanCollide = false
	
	if placeholder then
		p.Anchored = false
		local weld = Instance.new("WeldConstraint")
		weld.Part0 = p
		weld.Part1 = tower.PrimaryPart
		weld.Parent = p
		p.Parent = tower
	else
		p.Anchored = true
		p.Parent = workspace.Camera
	end
	
end

local function RemovePlaceholderTower()
	if towerToSpawn then
		towerToSpawn:Destroy()
		towerToSpawn = nil
		rotation = 0
	end
end

local function AddPlaceholderTower (name)
	
	local towerExists = towers:WaitForChild(name)
	if towerExists then
		RemovePlaceholderTower()
		towerToSpawn = towerExists:Clone()
		towerToSpawn.Parent = workspace
	end
	
	CreateRangeCircle(towerToSpawn, true)
	
	for i, object in ipairs(towerToSpawn:GetDescendants()) do
		if object:IsA("BasePart") then
			PhysiecsServierce:SetPartCollisionGroup(object, "tower")
			if object.Name ~= Range then
				object.CollisionGroup = "Tower"
				object.Material = Enum.Material.ForceField
			end
		end
	end	
end

local function ColorPlaceholderTower(color)
	for i, object in ipairs(towerToSpawn:GetDescendants()) do
		if object:IsA("BasePart") then
			object.Color = color
		end
	end	
end

for i, tower in pairs(towers:GetChildren()) do
	if tower:IsA("Model") then
		local button = gui.Towers.g.button:Clone()
		local config = tower:WaitForChild("Config")
		button.Name = tower.Name
		button.Image = config.Image.Image
		button.LayoutOrder = config.Price.Value
		button.Visible = true
		button.Price.Text = config.Price.Value
		button.Parent = gui.Towers.g

		button.Activated:Connect(function()
			local allowedtospawn = RequestTowerFunction:InvokeServer(tower.Name)
			if allowedtospawn then
				AddPlaceholderTower(tower.Name)
			end
		end)
	end
end

gui.Towers.g.button:Destroy()

local function ToggleTowerInfo()
	workspace.Camera:ClearAllChildren()
	gui.Title.Text = "Towers:" .. placedTowers .. "/" .. maxTowers
	
	if selectedTower then
		CreateRangeCircle(selectedTower)
		gui.Selection.Visible = true
		local config = selectedTower.Config
		local stats = gui.Selection.Stats
		stats.Damage.value.Text = config.Damage.Value
		stats.CoolDown.value.Text = config.CoolDown.Value
		stats.Range.value.Text = config.range.Value
		gui.Selection.Tittle.TowerName.Text = selectedTower.Name
		gui.Selection.Tittle.OwnerName.Text = config.Owner.Value .. "'s"
		gui.Selection.Tittle.Image.Image = config.Image.Image
		
		if config.Owner.Value == players.LocalPlayer.Name then
			gui.Selection.Action.Visible = true
			local upgradetower = config:FindFirstChild("Upgrade")

			if upgradetower then
				gui.Selection.Action.Upgrade.Visible = true
				gui.Selection.Action.Upgrade.TextLabel.Text = "Upgrade ("  .. upgradetower.Value.Config.Price.Value .. ")"
			else 
				gui.Selection.Action.Upgrade.Visible = false
			end
		else
			gui.Selection.Action.Visible = false
		end
	else
		gui.Selection.Visible = false
	end
end

--gui.Selection.Action.Target.Activated:Connect(function()
	--if selectedTower then
		--local targetChangeSucsess = changemodeFunction:InvokeServer(selectedTower)
		--if targetChangeSucsess then
			
		--end
	--end
--end)

gui.Selection.Action.Upgrade.Activated:Connect(function()
	if selectedTower then
		local upgradeTower = selectedTower:WaitForChild("Config").Upgrade.Value
		local allowedtoUpgrade = RequestTowerFunction:InvokeServer(upgradeTower.Name)
		if allowedtoUpgrade then
			selectedTower = spawnTowerFunction:InvokeServer(upgradeTower.Name, selectedTower.PrimaryPart.CFrame, selectedTower)
			ToggleTowerInfo()
		end
	end
end)

gui.Selection.Action.Sell.Activated:Connect(function()
	if selectedTower then
		local soldlTower = sellTowerFunction:InvokeServer(selectedTower)
		
		if soldTower then
			placedTowers -= 1
			selectedTower = nil
			ToggleTowerInfo()
		end
	end
end)

UserInputService.InputBegan:Connect(function(input, prossed)
	if prossed then
		return
	end
	if towerToSpawn then
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			if canPlace then
				local placedtower = spawnTowerFunction:InvokeServer(towerToSpawn.Name, towerToSpawn.PrimaryPart.CFrame)
				if placedtower then
					placedTowers += 1					
					RemovePlaceholderTower()
					ToggleTowerInfo()
				end
			end
		elseif input.KeyCode == Enum.KeyCode.R then
			rotation += 90
		end
	elseif hoveredInstance and input.UserInputType == Enum.UserInputType.MouseButton1 then
		local model = hoveredInstance:FindFirstAncestorOfClass("Model")
		
		if model and model.Parent == workspace.Towers then
			selectedTower = model
		else 
			selectedTower = nil
		end
		ToggleTowerInfo()
	end
	
end)

RunService.RenderStepped:Connect(function()
	local result = mouseRayCast({towerToSpawn})
	if result and result.Instance then
		if towerToSpawn then
			hoveredInstance = nil
			if result.Instance.Parent.Name == "TowerArea" then
				canPlace = true
				ColorPlaceholderTower(Color3.new(0,1,0))
			else	
				canPlace = false
				ColorPlaceholderTower(Color3.new(1,0,0))
			end
			local x = result.Position.X
			local y = result.Position.Y + towerToSpawn.Humanoid.HipHeight + (towerToSpawn.PrimaryPart.Size.Y / 0.8)
			local z = result.Position.Z

			local cframe = CFrame.new(x,y,z) * CFrame.Angles(0, math.rad(rotation), 0)
			towerToSpawn:SetPrimaryPartCFrame(cframe)
		else
			hoveredInstance = result.Instance
		end
	else
		hoveredInstance = nil
	end
end)